name: build-and-deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR (push)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/2025-LIKELION-BuyDobong/2025-LIKELION-BuyDobong-BE/buydobong-app
          tags: |
            type=raw,value=latest
            type=sha,format=long

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: SSH deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -euo pipefail
            
            sudo mkdir -p /opt/buydobong
            sudo chown -R $USER:$USER /opt/buydobong
            cd /opt/buydobong

            TMP="$(mktemp)"
            sudo touch .env
            sudo chmod 600 .env
            
            sudo grep -vE '^(PUSH_VAPID_PUBLIC_KEY|PUSH_VAPID_PRIVATE_KEY)=' .env | sudo tee "$TMP" >/dev/null
            printf "PUSH_VAPID_PUBLIC_KEY=%s\n" "${{ secrets.PUSH_VAPID_PUBLIC_KEY }}" | sudo tee -a "$TMP" >/dev/null
            printf "PUSH_VAPID_PRIVATE_KEY=%s\n" "${{ secrets.PUSH_VAPID_PRIVATE_KEY }}" | sudo tee -a "$TMP" >/dev/null
            sudo mv "$TMP" .env
            sudo chmod 600 .env

            if [ -n "${{ secrets.GHCR_PAT }}" ]; then
              echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u "${{ secrets.GHCR_USER }}" --password-stdin
            fi

            docker compose -f docker-compose.yml -f docker-compose.prod.yml pull app
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --no-deps --no-build app

            docker image prune -f
